# Default values for Traefik
image:
  name: traefik
  pullPolicy: IfNotPresent

tolerations:
  - operator: Exists

# Configure the deployment
deployment:
  enabled: true
  # Can be either Deployment or DaemonSet
  kind: DaemonSet
  # Number of pods of the deployment (only applies when kind == Deployment)
  replicas: 1
  # Amount of time (in seconds) before Kubernetes will send the SIGKILL signal if Traefik does not shut down
  terminationGracePeriodSeconds: 60
  # The minimum number of seconds Traefik needs to be up and running before the DaemonSet/Deployment controller considers it available
  dnsPolicy: ClusterFirstWithHostNet
  minReadySeconds: 1

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  maxUnavailable: 70%

# Use ingressClass. Ignored if Traefik version < 2.3 / kubernetes < 1.18.x
ingressClass:
  enabled: true
  isDefaultClass: true

# Create an IngressRoute for the dashboard
ingressRoute:
  dashboard:
    enabled: true
    entryPoints: ["traefik","web","websecure"]
    middlewares: ["http-https-redirectscheme"]

rollingUpdate:
  maxUnavailable: 1
  maxSurge: 1

# Configure providers
providers:
  kubernetesCRD:
    enabled: true
    allowCrossNamespace: true
    allowExternalNameServices: false

  kubernetesIngress:
    enabled: true

# Logs - https://docs.traefik.io/observability/logs/
logs:
  general:
    level: ERROR
  access:
    enabled: true
    fields:
      general:
        defaultmode: keep
      headers:
        defaultmode: drop

metrics:
  prometheus:
    entryPoint: metrics

globalArguments:
  - "--global.checknewversion"
  - "--global.sendanonymoususage"

additionalArguments:
  - "--serverstransport.insecureskipverify=true"
  - "--entryPoints.web.forwardedHeaders.insecure=true"
  - "--entryPoints.websecure.forwardedHeaders.insecure=true"

ports:
  traefik:
    port: 9000
    expose: false
    exposedPort: 9000
    protocol: TCP
  web:
    port: 8080
    expose: true
    exposedPort: 80
    protocol: TCP
  websecure:
    port: 8443
    expose: true
    exposedPort: 443
    protocol: TCP
    tls:
      enabled: false
  metrics:
    port: 9101
    expose: false
    exposedPort: 9101
    protocol: TCP

# Pod Resources
resources:
  requests:
    cpu: "100m"
    memory: "50Mi"
  limits:
    cpu: "400m"
    memory: "250Mi"

# Options for the main traefik service, where the entrypoints traffic comes from.
service:
  enabled: true
  type: LoadBalancer
  spec:
    externalTrafficPolicy: Local
  annotations:
    external-dns.alpha.kubernetes.io/hostname: cloud.danmanners.com
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/tags: "name=TraefikIngerss-CloudHomelab"
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"

## Create HorizontalPodAutoscaler object.
autoscaling:
  enabled: false

persistence:
  enabled: false

# Whether Role Based Access Control objects like roles and rolebindings should be created
rbac:
  enabled: true
  namespaced: false

# Enable to create a PodSecurityPolicy and assign it to the Service Account via RoleBinding or ClusterRoleBinding
podSecurityPolicy:
  enabled: false

# Additional serviceAccount annotations (e.g. for oidc authentication)
serviceAccountAnnotations: {}

# Set the container security context
# To run the container with ports below 1024 this will need to be adjust to run as root
securityContext:
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532

podSecurityContext:
  fsGroup: 65532
