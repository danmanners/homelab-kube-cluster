global:
  databasePassword: kubeclarity
  docker:
    registry: "core.harbor.homelab.danmanners.com/ghcr.io/openclarity"
    tag: "latest"
    imagePullPolicy: Always
  openShiftRestricted: false
  nodeSelector:
    kubernetes.io/os: linux
    kubernetes.io/arch: amd64

## End of Global Values
#######################################################################################

#######################################################################################
## Curl Values
curl:
  image:
    registry: "core.harbor.homelab.danmanners.com/docker.io"
    repository: curlimages/curl
    tag: 8.4.0

kubeclarity:
  logLevel: warning
  enableDBInfoLog: false
  prometheus:
    enabled: false
    serviceMonitor:
      enabled: false
      interval: 30s
      annotations: {}
      labels: {}
    refreshIntervalSeconds: 300

  service:
    type: ClusterIP
    port: 8080

  ingress:
    enabled: true
    ingressClassName: "nginx"
    labels: {}
    annotations:
      cert-manager.io/cluster-issuer: acme-prod
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-secret: basic-auth
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'

    hosts:
    - host: kubeclarity.homelab.danmanners.com

    tls:
    - secretName: kubeclarity-tls
      hosts:
      - kubeclarity.homelab.danmanners.com

  resources:
    requests:
      memory: "200Mi"
      cpu: "100m"
    limits:
      memory: "1000Mi"
      cpu: "1000m"

  initContainers:
    resources:
      requests:
        memory: "100Mi"
        cpu: "100m"
      limits:
        memory: "200Mi"
        cpu: "200m"

## End of KubeClarity Values
#######################################################################################

#######################################################################################
## KubeClarity Runtime Scan Values

kubeclarity-runtime-scan:
  httpsProxy: ""
  httpProxy: ""
  resultServicePort: 8888

  ## Scanner jobs and pods labels.
  labels:
    app: kubeclarity-scanner
    sidecar.istio.io/inject: "false"

  ## Scanner jobs namespace.
  # If left blank, the scanner jobs will run in the same namespace as pod being scanned.
  # If set, the scanner jobs will run in the given namespace unless:
  # 1. The scanner job must run in the pod namespace to fetch image pull secrets, OR
  # 2. The scanner job must run in the release namespace to fetch service credentials (more info in https://github.com/openclarity/kubeclarity#private-registries-support-for-k8s-runtime-scan)
  namespace: ""

  ## Scanner pods tolerations.
  # tolerations:
  # - key: key1
  #   operator: Exists
  #   effect: NoSchedule
  # - key: key1
  #   operator: Equal
  #   effect: NoSchedule
  #   value: "value1"

  ## Scanner pods nodeSelector.
  # nodeSelector:
  #   key1: value1

  ## Scanner pods Affinity
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  # affinity: {}

  registry:
    skipVerifyTlS: "false"
    useHTTP: "false"

  cis-docker-benchmark-scanner:
    ## Docker Image values.
    docker:
      ## Use to overwrite the global docker params
      ##
      imageName: ""

    ## Scanner logging level (debug, info, warning, error, fatal, panic).
    logLevel: warning

    ## Timeout for the cis docker benchmark scanner job.
    timeout: "2m"

    resources:
      requests:
        memory: "50Mi"
        cpu: "50m"
      limits:
        memory: "1000Mi"
        cpu: "1000m"

  vulnerability-scanner:
    ## Docker Image values.
    docker:
      ## Use to overwrite the global docker params
      ##
      imageName: ""

    ## Scanner logging level (debug, info, warning, error, fatal, panic).
    logLevel: warning

    resources:
      requests:
        memory: "50Mi"
        cpu: "50m"
      limits:
        memory: "1000Mi"
        cpu: "1000m"

    ## Analyzer config.
    analyzer:
      ## Space seperated list of analyzers. (syft gomod)
      analyzerList: "syft gomod"

      analyzerScope: "squashed"

      trivy:
        ## Enable trivy analyzer, if true make sure to add it to analyzerList above
        ##
        enabled: false
        timeout: "300"

    ## Scanner config.
    scanner:
      ## Space seperated list of scanners. (grype dependency-track)
      scannerList: "grype dependency-track trivy"

      grype:
        ## Enable grype scanner, if true make sure to add it to scannerList above
        ##
        enabled: true
        ## Grype scanner mode. (LOCAL, REMOTE)
        mode: "REMOTE"

        ## Remote grype scanner config.
        remote-grype:
          timeout: "2m"

      dependency-track:
        ## Enable dependency-track scanner, if true make sure to add it to scannerList above
        ##
        enabled: true
        insecureSkipVerify: "true"
        disableTls: "true"
        apiserverAddress: "dependency-track-apiserver.dependency-track"
        apiKey: ""

      trivy:
        ## Enable trivy scanner, if true make sure to add it to scannerList above.
        ## To guarentee reliable scans, also ensure that the trivy analyzer is enabled.
        ##
        enabled: true
        timeout: "300"


## End of KubeClarity Runtime Scan Values
#######################################################################################

#######################################################################################
## KubeClarity Grype Server Values

kubeclarity-grype-server:
  enabled: true

  ## Docker Image values.
  docker:
    imageRepo: "ghcr.io/openclarity"
    imageTag: "v0.6.0"
    imagePullPolicy: Always

  ## Logging level (debug, info, warning, error, fatal, panic).
  logLevel: warning

  servicePort: 9991

  resources:
    requests:
      cpu: "200m"
      memory: "200Mi"
    limits:
      cpu: "1000m"
      memory: "1G"

  ## Overrides global.affinity
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  # affinity: {}

  ## Overrides global.nodeSelector
  # nodeSelector:
  #   key1: value1

## End of KubeClarity Grype Server Values
#######################################################################################

#######################################################################################
## KubeClarity Trivy Server Values
## https://github.com/aquasecurity/trivy/blob/main/helm/trivy/values.yaml

kubeclarity-trivy-server:
  enabled: true

  ## Docker Image values.
  image:
    registry: core.harbor.homelab.danmanners.com/docker.io
    repository: aquasec/trivy
    tag: 0.47.0
    pullPolicy: IfNotPresent

  ## By default disable requirement for persistent storage
  persistence:
    enabled: true
    storageClass: ceph-rbd
    accessMode: ReadWriteOnce
    size: 5Gi

  podSecurityContext:
    runAsUser: 1001
    runAsNonRoot: true
    fsGroup: 1001

  securityContext:
    privileged: false
    readOnlyRootFilesystem: true

  trivy:
    debugMode: false

  service:
    port: 9992

  resources:
    requests:
      cpu: "200m"
      memory: "200Mi"
    limits:
      cpu: "1000m"
      memory: "1G"

## End of KubeClarity Trivy Server Values
#######################################################################################

#######################################################################################
## KubeClarity SBOM DB Values

kubeclarity-sbom-db:
  ## Logging level (debug, info, warning, error, fatal, panic).
  logLevel: warning

  servicePort: 8080
  resources:
    requests:
      memory: "20Mi"
      cpu: "10m"
    limits:
      memory: "1Gi"
      cpu: "200m"

  ## Overrides global.affinity
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  # affinity: {}

  ## Overrides global.nodeSelector
  # nodeSelector:
  #   key1: value1

## End of KubeClarity SBOM DB Values
#######################################################################################

#######################################################################################
## KubeClarity Internal Postgres Values
## Use kubeclarity-postgresql if you want this chart to deploy a PostgreSQL instance
kubeclarity-postgresql:
  enabled: false

# Use kubeclarity-postgresql-external if you want to reach an already existing PostgreSQL instance
kubeclarity-postgresql-external:
  enabled: true
  auth:
    existingSecret: kubeclarity-postgresql-secret
    username: kubeclarity
    host: primary-rw.postgres.svc.cluster.local # replace this to reach your PostgreSQL instance
    port: 5432
    database: kubeclarity
    sslMode: disable

# PostgreSQL connection information
kubeclarity-postgresql-secret:
  create: false
  secretKey: "secretKey"
